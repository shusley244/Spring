AOP:面向切面编程，相对于OOP面向对象编程。

Spring的AOP存在目的是为了解耦。AOP可以让一组类共享相同的行为。在OOP中只能通过继承类和实现接口，这样会让代码耦合度增强，
且类继承只能单继承，阻碍了更多行为添加到一组类上，AOP弥补了OOP的不足。

Spring 支持AspectJ的注解式切面编程。
(1) 使用@Aspect 声明是一个切面。
(2) 使用@After @Before @Around 定义建言(advice),可直接将拦截规则(切点)作为参数。
(3) 其中@After @Before @Around参数的拦截规则为切点(PointCut),为了使切点复用,可使用
@PointCut专门定义拦截规则，然后在参数中调用。
(4) 其中符合条件的每一个被拦截处为连接点(JoinPoint)。


此处练习两种做法   基于注解拦截和基于方法拦截。

Spring本身在事务处理(@Transcational)和数据缓存(@Cacheable等)上面都使用注解形式的拦截。